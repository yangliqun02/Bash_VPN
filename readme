本项目可以解决因网络原因无法正常执行安装脚本配置项目的问题（例如setup.py）
解决方案概述：
1. **问题背景：**
   - 在一些受网络限制的地区，常常无法通过 `setup.py` 等安装工具成功安装项目，因为其中的依赖需要从网络下载，而网络连接往往会受到限制。
   - 执行 `python` 安装脚本时，生成的 shell 指令如果因为网络原因失败，会导致整个安装过程中断。
   
2. **无感知的 Shell VPN 配置：**
   - 通过结合 `gost`（一个代理工具）与 `Shadowsocks`（一个加密代理工具），你能够配置一个无感知的 VPN 解决方案。这可以在脚本运行时透明地为所有需要联网的命令提供代理支持，从而避免由于无法下载依赖或访问外部资源而导致的失败。
   
3. **优势：**
   - **自动化解决网络问题：** 通过 `gost` 和 `Shadowsocks` 配置的 VPN，使得项目安装过程中的网络请求可以绕过限制，而不需要人工干预。
   - **简化配置过程：** 这种方法可以避免手动下载依赖项或重写库，简化了在受限网络环境下的安装过程。

4. **应用场景：**
   - **企业内部环境：** 对于需要在公司内网环境中部署项目的情况，无法直接访问外部网络时，这个解决方案特别有效。
   - **开发与部署：** 在网络受到限制的地区（例如某些国家或公司环境），使用这种配置可以确保安装脚本和程序依赖项能够正确下载。

进一步的实现：
- **gost 配置：** 你可以将 `gost` 配置为 SOCKS5 代理或 HTTP 代理，使得通过代理的所有网络请求都可以“无感知地”处理，从而避免因网络限制导致的安装失败。
- **Shadowsocks 配置：** 配合 `gost` 使用 `Shadowsocks` 提供更强的加密和防火墙穿透能力。

这种结合使用的策略，可以有效规避各种因网络问题而导致的安装失败，从而保证项目顺利进行。

### Project Overview:
This project aims to solve the problem of being unable to execute installation scripts and configure projects (such as `setup.py`) due to network issues.

### Solution Overview:
1. **Problem Background:**
   - In some network-restricted areas, it is often impossible to successfully install a project using installation tools like `setup.py` because dependencies need to be downloaded from the internet, which is often restricted.
   - When executing a `python` installation script, if the shell commands fail due to network issues, the entire installation process will be interrupted.

2. **Invisible Shell VPN Configuration:**
   - By combining `gost` (a proxy tool) with `Shadowsocks` (an encrypted proxy tool), you can configure an invisible VPN solution. This allows all commands that need network access to be transparently routed through a proxy, preventing failures caused by being unable to download dependencies or access external resources.

3. **Advantages:**
   - **Automated Network Problem Resolution:** The VPN configured with `gost` and `Shadowsocks` allows network requests during the project installation process to bypass restrictions without requiring manual intervention.
   - **Simplified Configuration Process:** This approach eliminates the need to manually download dependencies or rewrite libraries, simplifying the installation process in restricted network environments.

4. **Use Cases:**
   - **Enterprise Internal Environments:** For cases where projects need to be deployed within a company’s internal network but direct access to external networks is not possible, this solution is particularly effective.
   - **Development and Deployment:** In areas where the network is restricted (such as some countries or corporate environments), using this configuration ensures that installation scripts and program dependencies can be downloaded correctly.

### Further Implementation:
- **gost Configuration:** You can configure `gost` as a SOCKS5 proxy or an HTTP proxy to ensure that all network requests through the proxy are handled "invisibly," thereby avoiding installation failures caused by network restrictions.
- **Shadowsocks Configuration:** Using `Shadowsocks` alongside `gost` provides stronger encryption and firewall penetration capabilities.

This combined approach effectively bypasses installation failures caused by network issues, ensuring the smooth execution of the project.



-------------------------------------------------------------------------------------------------------------------------
如果你使用的是Linux系统，且确保本地端口7680与8080尚未使用，可以执行项目中的.sh自动完成配置，以下为相关指令供细致调节。
首先，将该项目clone至固定path，并进入该地址
1. shadowsocks 安装
sudo apt update
sudo apt install shadowsocks-libev

2. gost安装
curl socks5://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz
gzip -d gost-linux-amd64-2.11.1.gz
chmod +x gost-linux-amd64-2.11.1
sudo mv gost-linux-amd64-2.11.1 /usr/local/bin/gost

3. 启动shadowsocks
ss-local -c ./config_use.json &
（该config对应的server并不稳定，需要稳定连接的用户，请自行搭建shadowsocks server）

4. 启动gost
gost -L=:8080 -F=socks5://127.0.0.1:7680 &

5. 设置环境变量
export http_proxy="http://127.0.0.1:8080"
export https_proxy="http://127.0.0.1:8080"


If you are using a Linux system and ensure that local ports 7680 and 8080 are not in use, you can execute the `.sh` script in the project to automatically complete the configuration. Below are the relevant commands for detailed adjustment.

### First, clone the project to a fixed path and navigate to that directory.

1. **Install Shadowsocks:**
   ```bash
   sudo apt update
   sudo apt install shadowsocks-libev
   ```

2. **Install GOST:**
   ```bash
   curl -LO https://github.com/ginuerzh/gost/releases/download/v2.11.1/gost-linux-amd64-2.11.1.gz
   gzip -d gost-linux-amd64-2.11.1.gz
   chmod +x gost-linux-amd64-2.11.1
   sudo mv gost-linux-amd64-2.11.1 /usr/local/bin/gost
   ```

3. **Start Shadowsocks:**
   ```bash
   ss-local -c ./config_use.json &
   ```
   *(Note: The server in this config is paid by the author and not stable, so users who need a stable connection should set up their own Shadowsocks server.)*

4. **Start GOST:**
   ```bash
   gost -L=:8080 -F=socks5://127.0.0.1:7680 &
   ```

5. **Set environment variables:**
   ```bash
   export http_proxy="http://127.0.0.1:8080"
   export https_proxy="http://127.0.0.1:8080"
   ```
--------------------------------------------------------------------------------------------------------------
### 原理解析：

**Shadowsocks** 可以使用 **SOCKS5 协议**，完成绝大部分 VPN 任务。然而，像 `wget` 这样的广泛使用的下载工具并不支持 SOCKS5 协议。为了解决这个问题，我们引入了 **GOST**。

### 解决方案的关键步骤：

1. **Shadowsocks 与 SOCKS5**：
   - Shadowsocks 用来创建一个 SOCKS5 代理，可以处理大多数与 VPN 相关的任务。
   
2. **为何引入 GOST**：
   - 引入 GOST 是为了监听由 Shadowsocks 启动的 SOCKS5 端口（例如 `127.0.0.1:7680`）。
   - GOST 将 SOCKS5 协议转化为 **HTTP 协议**，从而让像 `wget` 这样的工具能够使用 HTTP 协议进行访问，因为 `wget` 本身并不支持 SOCKS5。

3. **GOST 的作用**：
   - GOST 启动一个端口（例如 `8080`）来监听 HTTP 协议，将通过 Shadowsocks（使用 SOCKS5 协议）接收到的数据转换成 HTTP 请求。这使得依赖 HTTP(S) 的工具能够顺利访问 web 资源，而不会遇到 SOCKS5 协议的限制问题。

4. **环境变量设置代理**：
   - 通过将 `http_proxy` 和 `https_proxy` 环境变量设置为 GOST 监听的端口（例如 `8080`），所有的 HTTP/HTTPS 请求都会通过 GOST 转发。
   - 这样就能有效地将流量通过 Shadowsocks 的 SOCKS5 代理进行传输，同时使系统无法感知到实际的代理路径。

### 最终效果：
- 完成上述步骤后，当在 shell 层面执行命令时，它们不会感知到具体的代理路径。
- 这使得原本因直接访问网站被拒绝的命令可以成功执行，从而解决了在执行诸如 repository 访问或安装脚本（如 `setup.py`）过程中的 bug。

### 总结：
该解决方案通过将 SOCKS5 流量转换为 HTTP 协议，解决了 `wget` 和其他 HTTP/HTTPS 依赖工具不支持 SOCKS5 协议的问题，并通过环境变量将所有 HTTP/HTTPS 流量通过 GOST 的 HTTP 代理转发。这样，即使在受限的环境中，依赖 HTTP/HTTPS 的工具也能够成功执行。


### Explanation of the Principle:

**Shadowsocks** can use the **SOCKS5 protocol**, which handles most VPN tasks. However, a widely used downloading tool like `wget` does not support the SOCKS5 protocol natively. To address this limitation, we introduce **GOST**.

### Key Steps in the Solution:

1. **Shadowsocks with SOCKS5**:
   - Shadowsocks is used to create a SOCKS5 proxy, which can handle most of the VPN-related tasks.
   
2. **Why GOST is Introduced**:
   - GOST is introduced to listen to the SOCKS5 port opened by Shadowsocks (e.g., `127.0.0.1:7680`).
   - GOST converts this SOCKS5 protocol into the **HTTP protocol** for use with tools like `wget`, which do not natively support SOCKS5.

3. **The Role of GOST**:
   - GOST starts a port (e.g., `8080`) to listen for the HTTP protocol, converting data received from Shadowsocks (which uses SOCKS5) to HTTP requests. This allows tools that rely on HTTP(S) to access web resources without encountering issues with the SOCKS5 limitation.

4. **Environment Variable Proxy Settings**:
   - By setting the `http_proxy` and `https_proxy` environment variables to the port GOST is listening on (e.g., `8080`), all HTTP/HTTPS requests made by applications like `wget` will be directed through GOST.
   - This effectively routes traffic through the Shadowsocks SOCKS5 proxy while making the system unaware of the underlying proxy path.

### Result:
- After completing these steps, when commands are executed at the shell level, they will not be aware of the actual proxy path.
- This allows previously blocked commands (due to direct access issues) to execute successfully, thus solving bugs encountered in tasks like repository access and installation scripts (e.g., `setup.py`) that rely on HTTP/HTTPS.

### In summary:
The solution provides a way to bypass the limitation of `wget` and other tools that do not support SOCKS5 by converting the SOCKS5 traffic to HTTP through GOST, and using environment variables to route all HTTP/HTTPS traffic via GOST’s HTTP proxy. This ensures that tools relying on HTTP/HTTPS can successfully execute even in restricted environments where SOCKS5 would normally be required.
